<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:jpa="http://www.springframework.org/schema/data/jpa"
   xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xsi:schemaLocation="
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
 	 
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
 
 <!-- The jpa:repositories scans for all interfaces that extend JpaRepository and 
      creates implementations for use at runtime.  -->
 <jpa:repositories base-package="com.mum.store" />
 
 
 <!-- Creates a JPA EntityManagerFactory according to JPA's standard container bootstrap contract.
      This is the most powerful way to set up a shared JPA EntityManagerFactory in a Spring application context;
  -->
   <bean id="entityManager" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
      <property name="dataSource" ref="dataSource" />
      <property name="packagesToScan" value="com.mum.store.domain" />
     
     <!--  provider-specific initialization,etc. -->
      <property name="jpaVendorAdapter">
         <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
      </property>
      <property name="jpaProperties">
         <props>
 <!-- 
    validate: validate the schema, makes no changes to the database.
    update: update the schema.
    create: creates the schema, destroying previous data.
    create-drop: drop the schema at the end of the session.
   These options intended to be developers tools and not to facilitate any production level databases 
            <prop key="hibernate.hbm2ddl.auto">create-drop</prop>
-->
            <!-- hibernate.dialect. This property makes Hibernate 
                 generate the appropriate SQL for the chosen database. -->
            <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
         </props>
      </property>
   </bean>
 
 <!-- H2 database CONSOLE -->
 <bean id="h2Server" class="org.h2.tools.Server" factory-method="createTcpServer" init-method="start" destroy-method="stop" depends-on="h2WebServer">
    <constructor-arg value="-tcp,-tcpAllowOthers,-tcpPort,9092"/>
</bean>
<bean id="h2WebServer" class="org.h2.tools.Server" factory-method="createWebServer" init-method="start" destroy-method="stop">
    <constructor-arg value="-web,-webAllowOthers,-webPort,8082"/>
</bean>
 
 <!-- database configuration -->
     <!-- <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="jdbc:http://localhost/spring_test/" />
    </bean> -->
    
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    	<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
    	<property name="url" value="jdbc:mysql://localhost:3306/springmvc"/>
    	<property name="username" value="root"></property>
    	<property name="password" value="root"></property>
    </bean>

 
   <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
      <property name="entityManagerFactory" ref="entityManager" />
   </bean>
   
   <!-- Scan for  transaction-based resources -->
   	<context:component-scan base-package="com.mum.store.service" />
  	<context:component-scan base-package="com.mum.store.domain" />
    <context:component-scan base-package="com.mum.store.repository" />
    
   <tx:annotation-driven transaction-manager="transactionManager"/>
 
 <!--
        Post-processor to perform exception translation on @Repository classes
        (from native exceptions such as JPA PersistenceExceptions to
        Spring&rsquo;s DataAccessException hierarchy).
    -->
   <bean id="persistenceExceptionTranslationPostProcessor"
      class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
 
</beans>
